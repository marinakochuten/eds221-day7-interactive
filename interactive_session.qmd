---
title: "EDS 221: Day 7 Interactive"
format: html
editor_options: 
  chunk_output_type: console
---
```{r}
# load packages ----
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

```{r}
# data wrangling refresher ----
penguins_filtered <- penguins |>
  filter(island %in% c("Biscoe", "Dream")) |>   #only include penguins at biscoe and dream islands
  select(-year, -sex) |>   # remove year and sex variables
  mutate(body_mass_kg = body_mass_g / 1000) |>   # add a new columns with penguim mass in kg
  rename(location = island)   # rename island variable to location


adelie_summary <- penguins |>
  filter(species == "Adelie") |>   # limit to only adelie penguins
  filter(!is.na(flipper_length_mm)) |>   # remove any observations where flipper length is na
  filter(!is.na(sex)) |>   #
  group_by(sex) |>   # group the data by sex
  summarise(flipper_length_mean = mean(flipper_length_mm, na.rm = TRUE),
            flipper_length_sd = sd(flipper_length_mm, na.rm = TRUE),
            sample_size = n())   # find the mean, standard deviation, and sample size of flipper length for male and female adelie penguins
```

```{r}
# addins - datapasta - tribble to paste in 
animals <- tibble::tribble(
  ~location,   ~species,  ~maturity,
   "lagoon",   "bobcat",    "adult",
    "bluff",   "coyote", "juvenile",
    "creek",      "fox",    "adult",
     "oaks", "squirrel", "juvenile",
    "bluff",   "bobcat",    "adult"
  )

sites <- tibble::tribble(
  ~location,      ~full_site_name, ~jurisdiction,
    "beach",       "Goleta Beach",     "SB City",
   "lagoon",        "UCSB Lagoon",        "UCSB",
    "bluff",       "Ellwood Mesa",     "SB City",
     "oaks", "Fremont Campground",        "USFS"
  )

```

# mutating joins
```{r}
full_join_example <- full_join(animals, sites)
```

```{r}
left_join_exmaple <- left_join(animals, sites)
```

```{r}
right_join_exmaple <- right_join(animals, sites)
```

```{r}
inner_join_example <- inner_join(animals, sites)
```

#filtering joins
```{r}
semi_join_example <- semi_join(animals, sites)

# another way to do the same thing
semi_join_test <- animals |>
  filter(location %in% sites$location)
```

```{r}
anti_join_example <- anti_join(animals, sites, by = "location")

#same as doing
anti_join_test <- animals |>
  filter(!location %in% sites$location)
```

```{r}
sites <- sites |>
  rename(place = location)   # if you rename the matching variable

# and try a join
test_join <- full_join(animals, sites) # it wont work

# so we have to tell R what the match is using by = 
test_join <- full_join(animals, sites, by = c("location" = "place"))

# usually though, it's better to change variable names up front to avoid confusion down the line
```

# dates and times with {lubridate}
```{r}
my_date <- "03-05-1998"
lubridate::mdy(my_date)  #mdy = month, day, year

my_date <- "11/7/2003"
lubridate::mdy(my_date)

my_date <- "08-Jun-1974"
lubridate::dmy(my_date)  #day, month, year

my_date <- "19610518"
lubridate::ymd(my_date)   #year, month, day


# making it fail

mdy("1942-08-30")  # wrong function for date format
```

```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)
class(time)  # class is POSIXct

# convert to PDT
with_tz(time, "America/Los_Angeles")

#convert to AEST
with_tz(time, "Australia/Sydney")

# pull just the time
my_time <- lubridate::ymd_hms(time)
week(my_time)  # week 33
day(my_time)  # 12th day
hour(my_time)  # 11th hour
minute(my_time)  # 18th minute
second(my_time)  # no second data, assumes 0
```

```{r}
# see how long it takes you to do analysis by storing the computers time at the start and the end
comp_time_start <- Sys.time()
comp_time_end <- Sys.time()
# then take the difference
comp_time_end - comp_time_start  # took 15 seconds
```


# date pieces as new columns
```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)

# make the dates into typical format
urchin_counts <- urchin_counts |>
  mutate(date = lubridate::mdy(date)) |>
  mutate(year = year(date),
         month = month(date),
         day = day(date))  # pull out individual pieces into their own columns

# now you can do analysis based on individual parts of the date
urchin_counts |>
  group_by(year) |>
  summarize(total = n())
```

# arithmetic on dates
```{r}
day_1 <- lubridate::ymd("2020-01-06")
day_2 <- ymd("2020-05-18")
day_3 <- ymd("2024-08-19")

# create a time interval
time_interval <- interval(day_1, day_2)

# check the length in days
time_length(time_interval, "day")

# or check the interval between times this day
time_length(interval(day_2, day_3), "year")
```


# Wrangling strings
```{r}
my_string <- "Teddy loves eating salmon and socks"

# does the pattern "love" exist within the string?
my_string |>
  str_detect("love")   # TRUE

my_string |>
  str_detect("pup")   # FALSE
```

```{r}
my_string <- c("burrito", "fish taco", "Taco salad"))

# Does the vector element contain the pattern "fish"?
my_string %>% str_detect("fish")   # FALSE
```

```{r}
# use in combo with other functions
skywalkers <- starwars |>
  filter(str_detect(name, "Skywalker"))
```

```{r}
firewalkers <- starwars |>
  mutate(name = str_replace(name, pattern = "Sky", replacement = "Fire"))

# useful if there were a repeated spelling error, annoying syntax, or with you want to make other updates throughout your data frame
```

```{r}
feedback <- c("   I ate     some  nachos", "Wednesday morning     ")

# Removes leading, trailing & duplicate interior whitespaces
str_squish(feedback)

# Removes leading & trailing whitespaces (but keeps interior)
str_trim(feedback)

str_to_lower(feedback)   # makes everything lowercase
str_to_upper(feedback)   # all to caps
str_to_title(feedback)   # caps each word like a title

str_count(feedback, pattern = "nachos")

```














